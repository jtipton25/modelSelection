{
    "contents" : "##\n## Simple linear regression model \n##\n## John Tipton - created 01.25.2014\n##\n\n##\n## model: Y = X %*% beta + epsilon\n##\n\n##\n## libraries and functions\n##\n\nmcmc.lm <- function(Y, X, X.tilde, n.mcmc, mu.0, sigma.squared.beta.0, alpha.beta, beta.beta, alpha.epsilon, beta.epsilon){\n  \n  ##\n  ## Initialize variables\n  ##\n  \n  n <- length(Y)\n  if(is.null(dim(X))){tau <- 1} else {tau <- dim(X)[2]}\n  if(is.null(dim(X.tilde))){N <- length(X.tilde)} else {N <- dim(X.tilde)[2]}\n  #\n  I.beta <- diag(tau)\n  sigma.squared.beta <- 1 / rgamma(1, alpha.beta, beta.beta)\n  Sigma.beta <- sigma.squared.beta * I.beta\n  Sigma.beta.inv <- 1 / sigma.squared.beta * I.beta \n  #\n  I.epsilon <- diag(n)\n  I.full <- diag(N)\n  sigma.squared.epsilon <- 1 / rgamma(1, alpha.epsilon, beta.epsilon) \n  Sigma.epsilon <- sigma.squared.epsilon * I.epsilon\n  Sigma.epsilon.inv <- 1 / sigma.squared.epsilon * I.epsilon\n  #\n  Sigma.0 <- sigma.squared.0 * I.beta\n  Sigma.0.inv <- 1 / sigma.squared.0 * I.beta\n  \n  mu.beta <- rMVN(A.chol = chol(Sigma.0), b = Sigma.0 %*% mu.0)\n  beta <- rMVN(A.chol = chol(Sigma.beta), b = Sigma.beta %*% mu.beta) \n  \n  ##\n  ## save variables\n  ##\n  \n  beta.save <- matrix(nrow = tau, ncol = n.mcmc)\n  sigma.squared.beta.save <- vector(length = n.mcmc)\n  sigma.squared.epsilon.save <- vector(length = n.mcmc)\n  Dbar.save <- vector(length = n.mcmc)\n  \n  ##\n  ## Start MCMC\n  ##\n  \n  for(k in 1:n.mcmc){\n    if(k %% 100 == 0){\n      cat(\" \", k)\n    }\n    \n    ##\n    ## sample beta\n    ##\n    \n    A.chol <- chol(t(X) %*% Sigma.epsilon.inv %*% X + Sigma.beta.inv)\n    b <- (t(X) %*% Sigma.epsilon.inv %*% Y + Sigma.beta.inv %*% mu.beta)\n    beta <- rMVN(A.chol, b)\n    \n    ##\n    ## sample mu.beta\n    ##\n    \n    A.chol <- chol(Sigma.beta.inv + Sigma.0.inv)\n    b <- (Sigma.beta.inv %*% beta + Sigma.0.inv %*% mu.0)\n    mu.beta <- rMVN(A.chol, b)\n    \n    ##\n    ## sample sigma.squared.beta\n    ##\n    \n    sigma.squared.beta <- 1 / rgamma(1, alpha.beta + tau / 2, beta.beta + 1 / 2 * t(beta - mu.beta) %*% (beta - mu.beta))\n    Sigma.beta <- sigma.squared.beta * I.beta\n    Sigma.beta.inv <- 1 / sigma.squared.beta * I.beta\n    \n    ##\n    ## sample sigma.squared.epsilon\n    ##\n    \n    sigma.squared.epsilon <- 1 / rgamma(1, alpha.epsilon + n / 2, beta.epsilon + 1 / 2 * t(Y - X %*% beta) %*% (Y - X %*% beta))\n    Sigma.epsilon <- sigma.squared.epsilon * I.epsilon\n    Sigma.epsilon.inv <- 1 / sigma.squared.epsilon* I.epsilon\n    \n    ##\n    ## DIC calculations\n    ##\n    \n    Dbar.save[k] <- - 2 * sum(dnorm(Y, X %*% beta, sqrt(sigma.squared.epsilon), log = TRUE))\n    \n    ##\n    ## posterior predictive distribution\n    ##\n    \n    y.pred[, k] <- \n      rMVN(1 / sqrt(sigma.squared.epsilon) * X.tilde %*% beta, 1 / sqrt(sigma.squared.epsilon) * I.full)\n      rnorm(1, X.tilde %*% beta, sqrt(sigma.squared.epsilon))\n    \n    ##\n    ## save variables\n    ##\n    \n    beta.save[, k] <- beta\n    sigma.squared.epsilon.save[k] <- sigma.squared.epsilon\n    sigma.squared.beta.save[k] <- sigma.squared.beta\n  }\n  \n  ##\n  ## output\n  ##\n  \n  list(beta.save = beta.save, sigma.squared.beta.save = sigma.squared.beta.save, sigma.squared.epsilon.save = sigma.squared.epsilon.save, Dbar.save = Dbar.save)\n}",
    "created" : 1399323512301.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "870230187",
    "id" : "10C467B7",
    "lastKnownWriteTime" : 1399324086,
    "path" : "~/modelSelection/bayesianLinearRegression/mcmc.lm.R",
    "project_path" : "bayesianLinearRegression/mcmc.lm.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}