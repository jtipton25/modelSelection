{
    "contents" : "##\n## libraries and functions\n##\n\nsource('dinvgamma.R')\nsource('mcmc.lm.R')\nsource('rMVN.R')\n\nsetwd(\"~/Linear-Model/Simple Linear Regression/\")\nsource(\"mcmc.lm.R\")\n\nmake.model.plot <- function(out){\n  n.burn <- floor(n.mcmc / 5) + 1\n  layout(matrix(1:4, 2))\n  matplot(t(out$beta.save[, n.burn:n.mcmc]), type = 'l')\n  #hist(out$beta.save[1,][n.burn:n.mcmc])\n  #abline(v = beta[1], col = 'red')\n  hist(out$beta.save[2,][n.burn:n.mcmc])\n  abline(v = beta[2], col = 'red')\n  plot(out$sigma.squared.beta.save[n.burn:n.mcmc], type = 'l')\n  plot(out$sigma.squared.epsilon.save[n.burn:n.mcmc], type = 'l')\n  abline(h = sigma.squared.epsilon, col = 'red')\n}\n\n\n##\n## Simulate some data\n##\n\nN <- 1000\nn <- 100\nbeta <- -3:3\nsigma.squared.epsilon <- 0.25\ntau <- length(beta)\n\nmake.lm.data <- function(N, n, beta, sigma.sqaured.epsilon){\n  tau <- length(beta)\n  X <- matrix(nrow = N, ncol = tau)\n  for(i in 1:tau){\n    X[, i] <- rnorm(N, 0, 1)\n  }\n  #   X <-matrix(c(rep(1, N), rep(seq(0, 1, length = N), tau - 1)), nrow = N, ncol = tau)\n  #   if(is.null(dim(X))){\n  #     Y <- X * beta + rnorm(N, 0, sigma.squared.epsilon)\n  #   } else {\n  Y <- X %*% beta + rnorm(N, 0, sigma.squared.epsilon)\n  #   }\n  #list(X = X, Y = Y, N = N, n = n, sigma.squared.epsilon = sigma.squared.epsilon)\n  data.frame(Y, X)\n}\n\ndata <- make.lm.data(N, n, beta, sigma.squared.epsilon)\n\nsamp <- sample(1:N, n)\ndata.samp <- data[samp, ]\n\nlm(Y ~ . ,data = data)\n\n##\n## Setup priors\n##\n\n# hyperparameters for mu.beta and sigma.squared.beta\nmu.0 <- rep(0, tau)\nsigma.squared.0 <- 100 \n# hyerparamters for sigma.squared.beta\nalpha.beta <- 2\nbeta.beta <- 10\ncurve(dinvgamma(x, alpha.beta, beta.beta), from = 0, to = 10)\n# hyperparameters for sigma.squared.epsilon\nalpha.epsilon <- 2\nbeta.epsilon <- 10\ncurve(dinvgamma(x, alpha.epsilon, beta.epsilon), from = 0, to = 10)\nn.mcmc <- 5000\n\n##\n## Fit mcmc\n##\n\nY <- data.samp[, 1]\nX <- as.matrix(data.samp[, 2:(tau + 1)], ncol = tau)\n\nout <- mcmc.lm(Y, X, n.mcmc, mu.0, sigma.squared.beta.0, alpha.beta, beta.beta, alpha.epsilon, beta.epsilon)\n\nmake.model.plot(out)\n\n",
    "created" : 1399323331681.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "442775664",
    "id" : "ED1D5F24",
    "lastKnownWriteTime" : 1393455894,
    "path" : "~/modelSelection/bayesianLinearRegression/script.lm.R",
    "project_path" : "bayesianLinearRegression/script.lm.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}